{
  "address": "0xa6Da88FA985557936594CD1a04d9F7B9593806E9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8d7d1065a8edc31d47b48c3b0857970dfe74a781d7a39ebbb7c9dcd9ae64e79",
  "receipt": {
    "to": null,
    "from": "0x3F47b2a1dF96DE2e198d646b598C37251CCC3b98",
    "contractAddress": "0xa6Da88FA985557936594CD1a04d9F7B9593806E9",
    "transactionIndex": 27,
    "gasUsed": "1117583",
    "logsBloom": "0x
    "blockHash": "0x8a085d9e3295f1bb7cbf9566eb3f284810b951e067aafec36c8d7ca60ad91d5d",
    "transactionHash": "0xe8d7d1065a8edc31d47b48c3b0857970dfe74a781d7a39ebbb7c9dcd9ae64e79",
    "logs": [],
    "blockNumber": 3897769,
    "cumulativeGasUsed": "3502013",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "96dd1aa02e55dc27e236e777882a31a7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[2])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RlnVerifier.sol\":\"Verifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/RlnVerifier.sol\":{\"content\":\"// File: https://github.com/Rate-Limiting-Nullifier/rln-contract-v1/blob/main/src/RLNVerifier.sol\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.11;\\n\\nlibrary Pairing {\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n    /// @return the generator of G1\\n\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n    /// @return the generator of G2\\n\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return G2Point(\\n            [\\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\\n            ],\\n            [\\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\\n            ]\\n        );\\n\\n        /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );*/\\n    }\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        }\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n    /// @return r the sum of two points of G1\\n\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 { invalid() }\\n        }\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n\\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 { invalid() }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n        uint256 elements = p1.length;\\n        uint256 inputSize = elements * 6;\\n        uint256[] memory input = new uint[](inputSize);\\n        for (uint256 i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint256[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 { invalid() }\\n        }\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n    /// Convenience method for a pairing check for two pairs.\\n\\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for three pairs.\\n\\n    function pairingProd3(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for four pairs.\\n\\n    function pairingProd4(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\\ncontract Verifier {\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\\n        );\\n\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n                6375614351688725206403948262868962793625744043794305715222011528459656738731\\n            ],\\n            [\\n                21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n                10505242626370262277552901082094356697409835680220590971873171140371331206856\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\\n            ],\\n            [\\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                12423666958566268737444308034237892912702648013927558883280319245968679130649,\\n                15986964528637281931410749976607406939789163617014270799373312764775965360012\\n            ],\\n            [\\n                8394023076056524902583796202128496802110914536948580183128578071394816660799,\\n                4964607673011101982600772762445991192038811950832626693345350322823626470007\\n            ]\\n        );\\n        vk.IC = new Pairing.G1Point[](3);\\n\\n        vk.IC[0] = Pairing.G1Point(\\n            1655549413518972190198478012616802994254462093161203201613599472264958303841,\\n            21742734017792296281216385119397138748114275727065024271646515586404591497876\\n        );\\n\\n        vk.IC[1] = Pairing.G1Point(\\n            16497930821522159474595176304955625435616718625609462506360632944366974274906,\\n            10404924572941018678793755094259635830045501866471999610240845041996101882275\\n        );\\n\\n        vk.IC[2] = Pairing.G1Point(\\n            9567910551099174794221497568036631681620409346997815381833929247558241020796,\\n            17282591858786007768931802126325866705896012606427630592145070155065868649172\\n        );\\n    }\\n\\n    function verify(uint256[] memory input, Proof memory proof) internal view returns (uint256) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\\n        if (\\n            !Pairing.pairingProd4(\\n                Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2\\n            )\\n        ) return 1;\\n        return 0;\\n    }\\n    /// @return r  bool true if proof is valid\\n\\n    function verifyProof(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        public\\n        view\\n        returns (bool r)\\n    {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        uint256[] memory inputValues = new uint[](input.length);\\n        for (uint256 i = 0; i < input.length; i++) {\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\",\"keccak256\":\"0x0ec3e9d0de4a99eeedf3adee137b7422bdea221fffdbb9e5226aac5c063545a4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061134a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61018f600480360361014081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a9565b604051808215151515815260200191505060405180910390f35b60006101b36111d2565b6040518060400160405280876000600281106101cb57fe5b60200201518152602001876001600281106101e257fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021557fe5b602002015160006002811061022657fe5b602002015181526020018860006002811061023d57fe5b602002015160016002811061024e57fe5b6020020151815250815260200160405180604001604052808860016002811061027357fe5b602002015160006002811061028457fe5b602002015181526020018860016002811061029b57fe5b60200201516001600281106102ac57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d757fe5b60200201518152602001856001600281106102ee57fe5b602002015181525081604001819052506060600267ffffffffffffffff8111801561031857600080fd5b506040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50905060008090505b600281101561038f5784816002811061036557fe5b602002015182828151811061037657fe5b6020026020010181815250508080600101915050610350565b50600061039c82846103bc565b14156103ad576001925050506103b4565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506103ea611205565b6103f26105f0565b9050806080015151600186510114610472576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f76657269666965722d6261642d696e707574000000000000000000000000000081525060200191505060405180910390fd5b61047a61124c565b6040518060400160405280600081526020016000815250905060008090505b865181101561057957838782815181106104af57fe5b60200260200101511061052a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640081525060200191505060405180910390fd5b61056a826105658560800151600185018151811061054457fe5b60200260200101518a858151811061055857fe5b6020026020010151610a55565b610b50565b91508080600101915050610499565b5061059c81836080015160008151811061058f57fe5b6020026020010151610b50565b90506105d26105ae8660000151610c6a565b8660200151846000015185602001518587604001518b604001518960600151610d04565b6105e257600193505050506105ea565b600093505050505b92915050565b6105f8611205565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f1b778bdaf7d2d76a141a64bf6d5983bfcf2040592634f45ab662dd189c58561981526020017f23584d1f9abbf32341679c4658b203b6fcf47ea6adc1d5548d2ebcf391bf7f8c815250815260200160405180604001604052807f128ed9443a2a711317e24319e0d4493caa1460605ab227b56333b91aa93c953f81526020017f0af9de4d2a3221e54094ef319d9499be2b04296747bfdf80116ca0ddf1dbb2778152508152508160600181905250600367ffffffffffffffff811180156108bc57600080fd5b506040519080825280602002602001820160405280156108f657816020015b6108e361124c565b8152602001906001900390816108db5790505b50816080018190525060405180604001604052807f03a901fcac85b5b11450b3c49766477fc01e5aff3a4b4ab323758526be9dde6181526020017f3011f38b83fb9e775234354ba1e0ff16490977bfb855cac99ed789c1426a7294815250816080015160008151811061096557fe5b602002602001018190525060405180604001604052807f24797f78c49f4d82fb02fbdf871928765135de74f2674c16912163f87ef60d5a81526020017f1700fa863be1dd74edb8e8a969a2795f8a0bd5dd94c98e11a937004de3f091a381525081608001516001815181106109d657fe5b602002602001018190525060405180604001604052807f15273ed6a7550a123c301f66798c2724218b80e7965ea13b8b1d2056b0deeb7c81526020017f263599b0396b575e21ee3248f704393e647c33d6e9580033eb8894da73ef82d48152508160800151600281518110610a4757fe5b602002602001018190525090565b610a5d61124c565b610a65611266565b836000015181600060038110610a7757fe5b602002018181525050836020015181600160038110610a9257fe5b6020020181815250508281600260038110610aa957fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610ad257610ad4565bfe5b5080610b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6d756c2d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610b5861124c565b610b60611288565b836000015181600060048110610b7257fe5b602002018181525050836020015181600160048110610b8d57fe5b602002018181525050826000015181600260048110610ba857fe5b602002018181525050826020015181600360048110610bc357fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610bec57610bee565bfe5b5080610c62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6164642d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610c7261124c565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610caf575060008360200151145b15610cd3576040518060400160405280600081526020016000815250915050610cff565b60405180604001604052808460000151815260200182856020015181610cf557fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610d2057600080fd5b50604051908082528060200260200182016040528015610d5a57816020015b610d4761124c565b815260200190600190039081610d3f5790505b5090506060600467ffffffffffffffff81118015610d7757600080fd5b50604051908082528060200260200182016040528015610db157816020015b610d9e6112aa565b815260200190600190039081610d965790505b5090508a82600081518110610dc257fe5b60200260200101819052508882600181518110610ddb57fe5b60200260200101819052508682600281518110610df457fe5b60200260200101819052508482600381518110610e0d57fe5b60200260200101819052508981600081518110610e2657fe5b60200260200101819052508781600181518110610e3f57fe5b60200260200101819052508581600281518110610e5857fe5b60200260200101819052508381600381518110610e7157fe5b6020026020010181905250610e868282610e96565b9250505098975050505050505050565b60008151835114610f0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70616972696e672d6c656e677468732d6661696c65640000000000000000000081525060200191505060405180910390fd5b600083519050600060068202905060608167ffffffffffffffff81118015610f3657600080fd5b50604051908082528060200260200182016040528015610f655781602001602082028036833780820191505090505b50905060008090505b8381101561110b57868181518110610f8257fe5b602002602001015160000151826000600684020181518110610fa057fe5b602002602001018181525050868181518110610fb857fe5b602002602001015160200151826001600684020181518110610fd657fe5b602002602001018181525050858181518110610fee57fe5b60200260200101516000015160006002811061100657fe5b602002015182600260068402018151811061101d57fe5b60200260200101818152505085818151811061103557fe5b60200260200101516000015160016002811061104d57fe5b602002015182600360068402018151811061106457fe5b60200260200101818152505085818151811061107c57fe5b60200260200101516020015160006002811061109457fe5b60200201518260046006840201815181106110ab57fe5b6020026020010181815250508581815181106110c357fe5b6020026020010151602001516001600281106110db57fe5b60200201518260056006840201815181106110f257fe5b6020026020010181815250508080600101915050610f6e565b506111146112d0565b6000602082602086026020860160086107d05a03fa905080600081146111395761113b565bfe5b50806111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f70616972696e672d6f70636f64652d6661696c6564000000000000000000000081525060200191505060405180910390fd5b6000826000600181106111be57fe5b602002015114159550505050505092915050565b60405180606001604052806111e561124c565b81526020016111f26112aa565b81526020016111ff61124c565b81525090565b6040518060a0016040528061121861124c565b81526020016112256112aa565b81526020016112326112aa565b815260200161123f6112aa565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806112bd6112f2565b81526020016112ca6112f2565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea26469706673582212205668c7cc51565b1c13a0d0ea7e9cfa28ac5b180f722bbd898b58273b1808ed7464736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61018f600480360361014081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a9565b604051808215151515815260200191505060405180910390f35b60006101b36111d2565b6040518060400160405280876000600281106101cb57fe5b60200201518152602001876001600281106101e257fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021557fe5b602002015160006002811061022657fe5b602002015181526020018860006002811061023d57fe5b602002015160016002811061024e57fe5b6020020151815250815260200160405180604001604052808860016002811061027357fe5b602002015160006002811061028457fe5b602002015181526020018860016002811061029b57fe5b60200201516001600281106102ac57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d757fe5b60200201518152602001856001600281106102ee57fe5b602002015181525081604001819052506060600267ffffffffffffffff8111801561031857600080fd5b506040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50905060008090505b600281101561038f5784816002811061036557fe5b602002015182828151811061037657fe5b6020026020010181815250508080600101915050610350565b50600061039c82846103bc565b14156103ad576001925050506103b4565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506103ea611205565b6103f26105f0565b9050806080015151600186510114610472576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f76657269666965722d6261642d696e707574000000000000000000000000000081525060200191505060405180910390fd5b61047a61124c565b6040518060400160405280600081526020016000815250905060008090505b865181101561057957838782815181106104af57fe5b60200260200101511061052a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640081525060200191505060405180910390fd5b61056a826105658560800151600185018151811061054457fe5b60200260200101518a858151811061055857fe5b6020026020010151610a55565b610b50565b91508080600101915050610499565b5061059c81836080015160008151811061058f57fe5b6020026020010151610b50565b90506105d26105ae8660000151610c6a565b8660200151846000015185602001518587604001518b604001518960600151610d04565b6105e257600193505050506105ea565b600093505050505b92915050565b6105f8611205565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f1b778bdaf7d2d76a141a64bf6d5983bfcf2040592634f45ab662dd189c58561981526020017f23584d1f9abbf32341679c4658b203b6fcf47ea6adc1d5548d2ebcf391bf7f8c815250815260200160405180604001604052807f128ed9443a2a711317e24319e0d4493caa1460605ab227b56333b91aa93c953f81526020017f0af9de4d2a3221e54094ef319d9499be2b04296747bfdf80116ca0ddf1dbb2778152508152508160600181905250600367ffffffffffffffff811180156108bc57600080fd5b506040519080825280602002602001820160405280156108f657816020015b6108e361124c565b8152602001906001900390816108db5790505b50816080018190525060405180604001604052807f03a901fcac85b5b11450b3c49766477fc01e5aff3a4b4ab323758526be9dde6181526020017f3011f38b83fb9e775234354ba1e0ff16490977bfb855cac99ed789c1426a7294815250816080015160008151811061096557fe5b602002602001018190525060405180604001604052807f24797f78c49f4d82fb02fbdf871928765135de74f2674c16912163f87ef60d5a81526020017f1700fa863be1dd74edb8e8a969a2795f8a0bd5dd94c98e11a937004de3f091a381525081608001516001815181106109d657fe5b602002602001018190525060405180604001604052807f15273ed6a7550a123c301f66798c2724218b80e7965ea13b8b1d2056b0deeb7c81526020017f263599b0396b575e21ee3248f704393e647c33d6e9580033eb8894da73ef82d48152508160800151600281518110610a4757fe5b602002602001018190525090565b610a5d61124c565b610a65611266565b836000015181600060038110610a7757fe5b602002018181525050836020015181600160038110610a9257fe5b6020020181815250508281600260038110610aa957fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610ad257610ad4565bfe5b5080610b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6d756c2d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610b5861124c565b610b60611288565b836000015181600060048110610b7257fe5b602002018181525050836020015181600160048110610b8d57fe5b602002018181525050826000015181600260048110610ba857fe5b602002018181525050826020015181600360048110610bc357fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610bec57610bee565bfe5b5080610c62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6164642d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610c7261124c565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610caf575060008360200151145b15610cd3576040518060400160405280600081526020016000815250915050610cff565b60405180604001604052808460000151815260200182856020015181610cf557fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610d2057600080fd5b50604051908082528060200260200182016040528015610d5a57816020015b610d4761124c565b815260200190600190039081610d3f5790505b5090506060600467ffffffffffffffff81118015610d7757600080fd5b50604051908082528060200260200182016040528015610db157816020015b610d9e6112aa565b815260200190600190039081610d965790505b5090508a82600081518110610dc257fe5b60200260200101819052508882600181518110610ddb57fe5b60200260200101819052508682600281518110610df457fe5b60200260200101819052508482600381518110610e0d57fe5b60200260200101819052508981600081518110610e2657fe5b60200260200101819052508781600181518110610e3f57fe5b60200260200101819052508581600281518110610e5857fe5b60200260200101819052508381600381518110610e7157fe5b6020026020010181905250610e868282610e96565b9250505098975050505050505050565b60008151835114610f0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70616972696e672d6c656e677468732d6661696c65640000000000000000000081525060200191505060405180910390fd5b600083519050600060068202905060608167ffffffffffffffff81118015610f3657600080fd5b50604051908082528060200260200182016040528015610f655781602001602082028036833780820191505090505b50905060008090505b8381101561110b57868181518110610f8257fe5b602002602001015160000151826000600684020181518110610fa057fe5b602002602001018181525050868181518110610fb857fe5b602002602001015160200151826001600684020181518110610fd657fe5b602002602001018181525050858181518110610fee57fe5b60200260200101516000015160006002811061100657fe5b602002015182600260068402018151811061101d57fe5b60200260200101818152505085818151811061103557fe5b60200260200101516000015160016002811061104d57fe5b602002015182600360068402018151811061106457fe5b60200260200101818152505085818151811061107c57fe5b60200260200101516020015160006002811061109457fe5b60200201518260046006840201815181106110ab57fe5b6020026020010181815250508581815181106110c357fe5b6020026020010151602001516001600281106110db57fe5b60200201518260056006840201815181106110f257fe5b6020026020010181815250508080600101915050610f6e565b506111146112d0565b6000602082602086026020860160086107d05a03fa905080600081146111395761113b565bfe5b50806111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f70616972696e672d6f70636f64652d6661696c6564000000000000000000000081525060200191505060405180910390fd5b6000826000600181106111be57fe5b602002015114159550505050505092915050565b60405180606001604052806111e561124c565b81526020016111f26112aa565b81526020016111ff61124c565b81525090565b6040518060a0016040528061121861124c565b81526020016112256112aa565b81526020016112326112aa565b815260200161123f6112aa565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806112bd6112f2565b81526020016112ca6112f2565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea26469706673582212205668c7cc51565b1c13a0d0ea7e9cfa28ac5b180f722bbd898b58273b1808ed7464736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[2])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
