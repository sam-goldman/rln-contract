{
  "address": "0x2992c7bFD42729991b614e95F4C2C78619f49c50",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "membershipDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poseidonHasher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateIdCommitment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FullTree",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientContractBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        }
      ],
      "name": "InsufficientDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientWithdrawalBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "MemberHasNoStake",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "MemberNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBERSHIP_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCommitmentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidonHasher",
      "outputs": [
        {
          "internalType": "contract IPoseidonHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd43925d8af90a6e3ea9e586f7de59545d34650ddaa1147b0f928339efd45bd83",
  "receipt": {
    "to": null,
    "from": "0x3F47b2a1dF96DE2e198d646b598C37251CCC3b98",
    "contractAddress": "0x2992c7bFD42729991b614e95F4C2C78619f49c50",
    "transactionIndex": 40,
    "gasUsed": "1051054",
    "logsBloom": "0x
    "blockHash": "0x4064799a5e376d282b02bb554a852afec18bd40c975820619025b4bdd3e7929b",
    "transactionHash": "0xd43925d8af90a6e3ea9e586f7de59545d34650ddaa1147b0f928339efd45bd83",
    "logs": [],
    "blockNumber": 4136452,
    "cumulativeGasUsed": "6882045",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    20,
    "0xCEa589C69338F02e857C2Bf201e897EF59D4CB69",
    "0xa6Da88FA985557936594CD1a04d9F7B9593806E9"
  ],
  "numDeployments": 2,
  "solcInputHash": "0e0cac683e804dc76f2f24c8a5b4012c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poseidonHasher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateIdCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FullTree\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientContractBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"InsufficientDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientWithdrawalBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"MemberHasNoStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"MemberNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBERSHIP_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCommitmentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidonHasher\",\"outputs\":[{\"internalType\":\"contract IPoseidonHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InsufficientDeposit(uint256,uint256)\":[{\"params\":{\"provided\":\"The provided deposit amount\",\"required\":\"The required deposit amount\"}}]},\"events\":{\"MemberRegistered(uint256,uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\",\"index\":\"The index of the member in the set\"}},\"MemberWithdrawn(uint256,uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\",\"index\":\"The index of the member in the set\"}}},\"kind\":\"dev\",\"methods\":{\"register(uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\"}},\"slash(uint256,address,uint256[8])\":{\"details\":\"Allows a user to slash a member\",\"params\":{\"idCommitment\":\"The idCommitment of the member\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"DuplicateIdCommitment()\":[{\"notice\":\"Member is already registered\"}],\"FullTree()\":[{\"notice\":\"The tree is full\"}],\"InsufficientContractBalance()\":[{\"notice\":\"Contract has insufficient balance to return\"}],\"InsufficientDeposit(uint256,uint256)\":[{\"notice\":\"Invalid deposit amount\"}],\"InsufficientWithdrawalBalance()\":[{\"notice\":\"User has insufficient balance to withdraw\"}],\"InvalidProof()\":[{\"notice\":\"Invalid proof\"}],\"InvalidReceiverAddress(address)\":[{\"notice\":\"Invalid receiver address, when the receiver is the contract itself or 0x0\"}],\"MemberHasNoStake(uint256)\":[{\"notice\":\"Member has no stake\"}],\"MemberNotRegistered(uint256)\":[{\"notice\":\"Member is not registered\"}]},\"events\":{\"MemberRegistered(uint256,uint256)\":{\"notice\":\"Emitted when a new member is added to the set\"},\"MemberWithdrawn(uint256,uint256)\":{\"notice\":\"Emitted when a member is removed from the set\"}},\"kind\":\"user\",\"methods\":{\"DEPTH()\":{\"notice\":\"The depth of the merkle tree\"},\"MEMBERSHIP_DEPOSIT()\":{\"notice\":\"The deposit amount required to register as a member\"},\"SET_SIZE()\":{\"notice\":\"The size of the merkle tree, i.e 2^depth\"},\"idCommitmentIndex()\":{\"notice\":\"The index of the next member to be registered\"},\"members(uint256)\":{\"notice\":\"The membership status of each member maps from idCommitment to their index in the set\"},\"poseidonHasher()\":{\"notice\":\"The Poseidon hasher contract\"},\"register(uint256)\":{\"notice\":\"Allows a user to register as a member\"},\"stakedAmounts(uint256)\":{\"notice\":\"The amount of eth staked by each member maps from idCommitment to the amount staked\"},\"verifier()\":{\"notice\":\"The groth16 verifier contract\"},\"withdraw()\":{\"notice\":\"Allows a user to withdraw funds allocated to them upon slashing a member\"},\"withdrawalBalance(address)\":{\"notice\":\"The balance of each user that can be withdrawn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rln.sol\":\"RLN\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0 OR MIT\\npragma solidity 0.8.15;\\n\\ninterface IVerifier {\\n    function verifyProof(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x538e61fbb62bf1ef9f0c3f7e7d771ddfc8506a97e7d98aada763830fc741d8b8\",\"license\":\"Apache-2.0 OR MIT\"},\"contracts/PoseidonHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Forked from https://github.com/kilic/rlnapp/\\n\\npragma solidity 0.8.15;\\n\\ninterface IPoseidonHasher {\\n    /// @notice Hashes the input using the Poseidon hash function, n = 2, second input is the constant 0\\n    /// @param input The input to hash\\n    function hash(uint256 input) external pure returns (uint256 result);\\n}\\n\\ncontract PoseidonHasher is IPoseidonHasher {\\n    uint256 constant Q =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant C0 =\\n        4417881134626180770308697923359573201005643519861877412381846989312604493735;\\n    uint256 constant C1 =\\n        5433650512959517612316327474713065966758808864213826738576266661723522780033;\\n    uint256 constant C2 =\\n        13641176377184356099764086973022553863760045607496549923679278773208775739952;\\n    uint256 constant C3 =\\n        17949713444224994136330421782109149544629237834775211751417461773584374506783;\\n    uint256 constant C4 =\\n        13765628375339178273710281891027109699578766420463125835325926111705201856003;\\n    uint256 constant C5 =\\n        19179513468172002314585757290678967643352171735526887944518845346318719730387;\\n    uint256 constant C6 =\\n        5157412437176756884543472904098424903141745259452875378101256928559722612176;\\n    uint256 constant C7 =\\n        535160875740282236955320458485730000677124519901643397458212725410971557409;\\n    uint256 constant C8 =\\n        1050793453380762984940163090920066886770841063557081906093018330633089036729;\\n    uint256 constant C9 =\\n        10665495010329663932664894101216428400933984666065399374198502106997623173873;\\n    uint256 constant C10 =\\n        19965634623406616956648724894636666805991993496469370618546874926025059150737;\\n    uint256 constant C11 =\\n        13007250030070838431593222885902415182312449212965120303174723305710127422213;\\n    uint256 constant C12 =\\n        16877538715074991604507979123743768693428157847423939051086744213162455276374;\\n    uint256 constant C13 =\\n        18211747749504876135588847560312685184956239426147543810126553367063157141465;\\n    uint256 constant C14 =\\n        18151553319826126919739798892854572062191241985315767086020821632812331245635;\\n    uint256 constant C15 =\\n        19957033149976712666746140949846950406660099037474791840946955175819555930825;\\n    uint256 constant C16 =\\n        3469514863538261843186854830917934449567467100548474599735384052339577040841;\\n    uint256 constant C17 =\\n        989698510043911779243192466312362856042600749099921773896924315611668507708;\\n    uint256 constant C18 =\\n        12568377015646290945235387813564567111330046038050864455358059568128000172201;\\n    uint256 constant C19 =\\n        20856104135605479600325529349246932565148587186338606236677138505306779314172;\\n    uint256 constant C20 =\\n        8206918720503535523121349917159924938835810381723474192155637697065780938424;\\n    uint256 constant C21 =\\n        1309058477013932989380617265069188723120054926187607548493110334522527703566;\\n    uint256 constant C22 =\\n        14076116939332667074621703729512195584105250395163383769419390236426287710606;\\n    uint256 constant C23 =\\n        10153498892749751942204288991871286290442690932856658983589258153608012428674;\\n    uint256 constant C24 =\\n        18202499207234128286137597834010475797175973146805180988367589376893530181575;\\n    uint256 constant C25 =\\n        12739388830157083522877690211447248168864006284243907142044329113461613743052;\\n    uint256 constant C26 =\\n        15123358710467780770838026754240340042441262572309759635224051333176022613949;\\n    uint256 constant C27 =\\n        19925004701844594370904593774447343836015483888496504201331110250494635362184;\\n    uint256 constant C28 =\\n        10352416606816998476681131583320899030072315953910679608943150613208329645891;\\n    uint256 constant C29 =\\n        10567371822366244361703342347428230537114808440249611395507235283708966113221;\\n    uint256 constant C30 =\\n        5635498582763880627392290206431559361272660937399944184533035305989295959602;\\n    uint256 constant C31 =\\n        11866432933224219174041051738704352719163271639958083608224676028593315904909;\\n    uint256 constant C32 =\\n        5795020705294401441272215064554385591292330721703923167136157291459784140431;\\n    uint256 constant C33 =\\n        9482202378699252817564375087302794636287866584767523335624368774856230692758;\\n    uint256 constant C34 =\\n        4245237636894546151746468406560945873445548423466753843402086544922216329298;\\n    uint256 constant C35 =\\n        12000500941313982757584712677991730019124834399479314697467598397927435905133;\\n    uint256 constant C36 =\\n        7596790274058425558167520209857956363736666939016807569082239187494363541787;\\n    uint256 constant C37 =\\n        2484867918246116343205467273440098378820186751202461278013576281097918148877;\\n    uint256 constant C38 =\\n        18312645949449997391810445935615409295369169383463185688973803378104013950190;\\n    uint256 constant C39 =\\n        15320686572748723004980855263301182130424010735782762814513954166519592552733;\\n    uint256 constant C40 =\\n        12618438900597948888520621062416758747872180395546164387827245287017031303859;\\n    uint256 constant C41 =\\n        17438141672027706116733201008397064011774368832458707512367404736905021019585;\\n    uint256 constant C42 =\\n        6374197807230665998865688675365359100400438034755781666913068586172586548950;\\n    uint256 constant C43 =\\n        2189398913433273865510950346186699930188746169476472274335177556702504595264;\\n    uint256 constant C44 =\\n        6268495580028970231803791523870131137294646402347399003576649137450213034606;\\n    uint256 constant C45 =\\n        17896250365994900261202920044129628104272791547990619503076839618914047059275;\\n    uint256 constant C46 =\\n        13692156312448722528008862371944543449350293305158722920787736248435893008873;\\n    uint256 constant C47 =\\n        15234446864368744483209945022439268713300180233589581910497691316744177619376;\\n    uint256 constant C48 =\\n        1572426502623310766593681563281600503979671244997798691029595521622402217227;\\n    uint256 constant C49 =\\n        80103447810215150918585162168214870083573048458555897999822831203653996617;\\n    uint256 constant C50 =\\n        8228820324013669567851850635126713973797711779951230446503353812192849106342;\\n    uint256 constant C51 =\\n        5375851433746509614045812476958526065449377558695752132494533666370449415873;\\n    uint256 constant C52 =\\n        12115998939203497346386774317892338270561208357481805380546938146796257365018;\\n    uint256 constant C53 =\\n        9764067909645821279940531410531154041386008396840887338272986634350423466622;\\n    uint256 constant C54 =\\n        8538708244538850542384936174629541085495830544298260335345008245230827876882;\\n    uint256 constant C55 =\\n        7140127896620013355910287215441004676619168261422440177712039790284719613114;\\n    uint256 constant C56 =\\n        14297402962228458726038826185823085337698917275385741292940049024977027409762;\\n    uint256 constant C57 =\\n        6667115556431351074165934212337261254608231545257434281887966406956835140819;\\n    uint256 constant C58 =\\n        20226761165244293291042617464655196752671169026542832236139342122602741090001;\\n    uint256 constant C59 =\\n        12038289506489256655759141386763477208196694421666339040483042079632134429119;\\n    uint256 constant C60 =\\n        19027757334170818571203982241812412991528769934917288000224335655934473717551;\\n    uint256 constant C61 =\\n        16272152964456553579565580463468069884359929612321610357528838696790370074720;\\n    uint256 constant C62 =\\n        2500392889689246014710135696485946334448570271481948765283016105301740284071;\\n    uint256 constant C63 =\\n        8595254970528530312401637448610398388203855633951264114100575485022581946023;\\n    uint256 constant C64 =\\n        11635945688914011450976408058407206367914559009113158286982919675551688078198;\\n    uint256 constant C65 =\\n        614739068603482619581328040478536306925147663946742687395148680260956671871;\\n    uint256 constant C66 =\\n        18692271780377861570175282183255720350972693125537599213951106550953176268753;\\n    uint256 constant C67 =\\n        4987059230784976306647166378298632695585915319042844495357753339378260807164;\\n    uint256 constant C68 =\\n        21851403978498723616722415377430107676258664746210815234490134600998983955497;\\n    uint256 constant C69 =\\n        9830635451186415300891533983087800047564037813328875992115573428596207326204;\\n    uint256 constant C70 =\\n        4842706106434537116860242620706030229206345167233200482994958847436425185478;\\n    uint256 constant C71 =\\n        6422235064906823218421386871122109085799298052314922856340127798647926126490;\\n    uint256 constant C72 =\\n        4564364104986856861943331689105797031330091877115997069096365671501473357846;\\n    uint256 constant C73 =\\n        1944043894089780613038197112872830569538541856657037469098448708685350671343;\\n    uint256 constant C74 =\\n        21179865974855950600518216085229498748425990426231530451599322283119880194955;\\n    uint256 constant C75 =\\n        14296697761894107574369608843560006996183955751502547883167824879840894933162;\\n    uint256 constant C76 =\\n        12274619649702218570450581712439138337725246879938860735460378251639845671898;\\n    uint256 constant C77 =\\n        16371396450276899401411886674029075408418848209575273031725505038938314070356;\\n    uint256 constant C78 =\\n        3702561221750983937578095019779188631407216522704543451228773892695044653565;\\n    uint256 constant C79 =\\n        19721616877735564664624984774636557499099875603996426215495516594530838681980;\\n    uint256 constant C80 =\\n        6383350109027696789969911008057747025018308755462287526819231672217685282429;\\n    uint256 constant C81 =\\n        20860583956177367265984596617324237471765572961978977333122281041544719622905;\\n    uint256 constant C82 =\\n        5766390934595026947545001478457407504285452477687752470140790011329357286275;\\n    uint256 constant C83 =\\n        4043175758319898049344746138515323336207420888499903387536875603879441092484;\\n    uint256 constant C84 =\\n        15579382179133608217098622223834161692266188678101563820988612253342538956534;\\n    uint256 constant C85 =\\n        1864640783252634743892105383926602930909039567065240010338908865509831749824;\\n    uint256 constant C86 =\\n        15943719865023133586707144161652035291705809358178262514871056013754142625673;\\n    uint256 constant C87 =\\n        2326415993032390211558498780803238091925402878871059708106213703504162832999;\\n    uint256 constant C88 =\\n        19995326402773833553207196590622808505547443523750970375738981396588337910289;\\n    uint256 constant C89 =\\n        5143583711361588952673350526320181330406047695593201009385718506918735286622;\\n    uint256 constant C90 =\\n        15436006486881920976813738625999473183944244531070780793506388892313517319583;\\n    uint256 constant C91 =\\n        16660446760173633166698660166238066533278664023818938868110282615200613695857;\\n    uint256 constant C92 =\\n        4966065365695755376133119391352131079892396024584848298231004326013366253934;\\n    uint256 constant C93 =\\n        20683781957411705574951987677641476019618457561419278856689645563561076926702;\\n    uint256 constant C94 =\\n        17280836839165902792086432296371645107551519324565649849400948918605456875699;\\n    uint256 constant C95 =\\n        17045635513701208892073056357048619435743564064921155892004135325530808465371;\\n    uint256 constant C96 =\\n        17055032967194400710390142791334572297458033582458169295920670679093585707295;\\n    uint256 constant C97 =\\n        15727174639569115300068198908071514334002742825679221638729902577962862163505;\\n    uint256 constant C98 =\\n        1001755657610446661315902885492677747789366510875120894840818704741370398633;\\n    uint256 constant C99 =\\n        18638547332826171619311285502376343504539399518545103511265465604926625041234;\\n    uint256 constant C100 =\\n        6751954224763196429755298529194402870632445298969935050224267844020826420799;\\n    uint256 constant C101 =\\n        3526747115904224771452549517614107688674036840088422555827581348280834879405;\\n    uint256 constant C102 =\\n        15705897908180497062880001271426561999724005008972544196300715293701537574122;\\n    uint256 constant C103 =\\n        574386695213920937259007343820417029802510752426579750428758189312416867750;\\n    uint256 constant C104 =\\n        15973040855000600860816974646787367136127946402908768408978806375685439868553;\\n    uint256 constant C105 =\\n        20934130413948796333037139460875996342810005558806621330680156931816867321122;\\n    uint256 constant C106 =\\n        6918585327145564636398173845411579411526758237572034236476079610890705810764;\\n    uint256 constant C107 =\\n        14158163500813182062258176233162498241310167509137716527054939926126453647182;\\n    uint256 constant C108 =\\n        4164602626597695668474100217150111342272610479949122406544277384862187287433;\\n    uint256 constant C109 =\\n        12146526846507496913615390662823936206892812880963914267275606265272996025304;\\n    uint256 constant C110 =\\n        10153527926900017763244212043512822363696541810586522108597162891799345289938;\\n    uint256 constant C111 =\\n        13564663485965299104296214940873270349072051793008946663855767889066202733588;\\n    uint256 constant C112 =\\n        5612449256997576125867742696783020582952387615430650198777254717398552960096;\\n    uint256 constant C113 =\\n        12151885480032032868507892738683067544172874895736290365318623681886999930120;\\n    uint256 constant C114 =\\n        380452237704664384810613424095477896605414037288009963200982915188629772177;\\n    uint256 constant C115 =\\n        9067557551252570188533509616805287919563636482030947363841198066124642069518;\\n    uint256 constant C116 =\\n        21280306817619711661335268484199763923870315733198162896599997188206277056900;\\n    uint256 constant C117 =\\n        5567165819557297006750252582140767993422097822227408837378089569369734876257;\\n    uint256 constant C118 =\\n        10411936321072105429908396649383171465939606386380071222095155850987201580137;\\n    uint256 constant C119 =\\n        21338390051413922944780864872652000187403217966653363270851298678606449622266;\\n    uint256 constant C120 =\\n        12156296560457833712186127325312904760045212412680904475497938949653569234473;\\n    uint256 constant C121 =\\n        4271647814574748734312113971565139132510281260328947438246615707172526380757;\\n    uint256 constant C122 =\\n        9061738206062369647211128232833114177054715885442782773131292534862178874950;\\n    uint256 constant C123 =\\n        10134551893627587797380445583959894183158393780166496661696555422178052339133;\\n    uint256 constant C124 =\\n        8932270237664043612366044102088319242789325050842783721780970129656616386103;\\n    uint256 constant C125 =\\n        3339412934966886386194449782756711637636784424032779155216609410591712750636;\\n    uint256 constant C126 =\\n        9704903972004596791086522314847373103670545861209569267884026709445485704400;\\n    uint256 constant C127 =\\n        17467570179597572575614276429760169990940929887711661192333523245667228809456;\\n    uint256 constant M00 =\\n        2910766817845651019878574839501801340070030115151021261302834310722729507541;\\n    uint256 constant M01 =\\n        19727366863391167538122140361473584127147630672623100827934084310230022599144;\\n    uint256 constant M10 =\\n        5776684794125549462448597414050232243778680302179439492664047328281728356345;\\n    uint256 constant M11 =\\n        8348174920934122550483593999453880006756108121341067172388445916328941978568;\\n\\n    function hash(\\n        uint256 input\\n    ) external pure override returns (uint256 result) {\\n        return _hash(input);\\n    }\\n\\n    function _hash(uint256 input) internal pure returns (uint256 result) {\\n        assembly {\\n            // Poseidon parameters should be t = 2, RF = 8, RP = 56\\n\\n            // We load the characteristic\\n            let q := Q\\n\\n            // In zerokit implementation, if we pass inp = [a0,a1,..,an] to Poseidon what is effectively hashed is [0,a0,a1,..,an]\\n            // Note that a sequence of MIX-ARK involves 3 Bn254 field additions before the mulmod happens. Worst case we have a value corresponding to 2*(p-1) which is less than 2^256 and hence doesn't overflow\\n            //ROUND 0 - FULL\\n            let s0 := C0\\n            let s1 := add(input, C1)\\n            // SBOX\\n            let t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 1 - FULL\\n            s0 := add(s0, C2)\\n            s1 := add(s1, C3)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 2 - FULL\\n            s0 := add(s0, C4)\\n            s1 := add(s1, C5)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 3 - FULL\\n            s0 := add(s0, C6)\\n            s1 := add(s1, C7)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 4 - PARTIAL\\n            s0 := add(s0, C8)\\n            s1 := add(s1, C9)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 5 - PARTIAL\\n            s0 := add(s0, C10)\\n            s1 := add(s1, C11)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 6 - PARTIAL\\n            s0 := add(s0, C12)\\n            s1 := add(s1, C13)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 7 - PARTIAL\\n            s0 := add(s0, C14)\\n            s1 := add(s1, C15)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 8 - PARTIAL\\n            s0 := add(s0, C16)\\n            s1 := add(s1, C17)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 9 - PARTIAL\\n            s0 := add(s0, C18)\\n            s1 := add(s1, C19)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 10 - PARTIAL\\n            s0 := add(s0, C20)\\n            s1 := add(s1, C21)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 11 - PARTIAL\\n            s0 := add(s0, C22)\\n            s1 := add(s1, C23)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 12 - PARTIAL\\n            s0 := add(s0, C24)\\n            s1 := add(s1, C25)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 13 - PARTIAL\\n            s0 := add(s0, C26)\\n            s1 := add(s1, C27)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 14 - PARTIAL\\n            s0 := add(s0, C28)\\n            s1 := add(s1, C29)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 15 - PARTIAL\\n            s0 := add(s0, C30)\\n            s1 := add(s1, C31)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 16 - PARTIAL\\n            s0 := add(s0, C32)\\n            s1 := add(s1, C33)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 17 - PARTIAL\\n            s0 := add(s0, C34)\\n            s1 := add(s1, C35)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 18 - PARTIAL\\n            s0 := add(s0, C36)\\n            s1 := add(s1, C37)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 19 - PARTIAL\\n            s0 := add(s0, C38)\\n            s1 := add(s1, C39)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 20 - PARTIAL\\n            s0 := add(s0, C40)\\n            s1 := add(s1, C41)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 21 - PARTIAL\\n            s0 := add(s0, C42)\\n            s1 := add(s1, C43)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 22 - PARTIAL\\n            s0 := add(s0, C44)\\n            s1 := add(s1, C45)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 23 - PARTIAL\\n            s0 := add(s0, C46)\\n            s1 := add(s1, C47)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 24 - PARTIAL\\n            s0 := add(s0, C48)\\n            s1 := add(s1, C49)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 25 - PARTIAL\\n            s0 := add(s0, C50)\\n            s1 := add(s1, C51)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 26 - PARTIAL\\n            s0 := add(s0, C52)\\n            s1 := add(s1, C53)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 27 - PARTIAL\\n            s0 := add(s0, C54)\\n            s1 := add(s1, C55)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 28 - PARTIAL\\n            s0 := add(s0, C56)\\n            s1 := add(s1, C57)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 29 - PARTIAL\\n            s0 := add(s0, C58)\\n            s1 := add(s1, C59)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 30 - PARTIAL\\n            s0 := add(s0, C60)\\n            s1 := add(s1, C61)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 31 - PARTIAL\\n            s0 := add(s0, C62)\\n            s1 := add(s1, C63)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 32 - PARTIAL\\n            s0 := add(s0, C64)\\n            s1 := add(s1, C65)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 33 - PARTIAL\\n            s0 := add(s0, C66)\\n            s1 := add(s1, C67)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 34 - PARTIAL\\n            s0 := add(s0, C68)\\n            s1 := add(s1, C69)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 35 - PARTIAL\\n            s0 := add(s0, C70)\\n            s1 := add(s1, C71)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 36 - PARTIAL\\n            s0 := add(s0, C72)\\n            s1 := add(s1, C73)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 37 - PARTIAL\\n            s0 := add(s0, C74)\\n            s1 := add(s1, C75)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 38 - PARTIAL\\n            s0 := add(s0, C76)\\n            s1 := add(s1, C77)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 39 - PARTIAL\\n            s0 := add(s0, C78)\\n            s1 := add(s1, C79)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 40 - PARTIAL\\n            s0 := add(s0, C80)\\n            s1 := add(s1, C81)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 41 - PARTIAL\\n            s0 := add(s0, C82)\\n            s1 := add(s1, C83)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 42 - PARTIAL\\n            s0 := add(s0, C84)\\n            s1 := add(s1, C85)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 43 - PARTIAL\\n            s0 := add(s0, C86)\\n            s1 := add(s1, C87)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 44 - PARTIAL\\n            s0 := add(s0, C88)\\n            s1 := add(s1, C89)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 45 - PARTIAL\\n            s0 := add(s0, C90)\\n            s1 := add(s1, C91)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 46 - PARTIAL\\n            s0 := add(s0, C92)\\n            s1 := add(s1, C93)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 47 - PARTIAL\\n            s0 := add(s0, C94)\\n            s1 := add(s1, C95)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 48 - PARTIAL\\n            s0 := add(s0, C96)\\n            s1 := add(s1, C97)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 49 - PARTIAL\\n            s0 := add(s0, C98)\\n            s1 := add(s1, C99)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 50 - PARTIAL\\n            s0 := add(s0, C100)\\n            s1 := add(s1, C101)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 51 - PARTIAL\\n            s0 := add(s0, C102)\\n            s1 := add(s1, C103)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 52 - PARTIAL\\n            s0 := add(s0, C104)\\n            s1 := add(s1, C105)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 53 - PARTIAL\\n            s0 := add(s0, C106)\\n            s1 := add(s1, C107)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 54 - PARTIAL\\n            s0 := add(s0, C108)\\n            s1 := add(s1, C109)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 55 - PARTIAL\\n            s0 := add(s0, C110)\\n            s1 := add(s1, C111)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 56 - PARTIAL\\n            s0 := add(s0, C112)\\n            s1 := add(s1, C113)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 57 - PARTIAL\\n            s0 := add(s0, C114)\\n            s1 := add(s1, C115)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 58 - PARTIAL\\n            s0 := add(s0, C116)\\n            s1 := add(s1, C117)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 59 - PARTIAL\\n            s0 := add(s0, C118)\\n            s1 := add(s1, C119)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 60 - FULL\\n            s0 := add(s0, C120)\\n            s1 := add(s1, C121)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 61 - FULL\\n            s0 := add(s0, C122)\\n            s1 := add(s1, C123)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 62 - FULL\\n            s0 := add(s0, C124)\\n            s1 := add(s1, C125)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            t := add(mulmod(s0, M00, q), mulmod(s1, M01, q))\\n            s1 := add(mulmod(s0, M10, q), mulmod(s1, M11, q))\\n            s0 := t\\n\\n            //ROUND 63 - FULL\\n            s0 := add(s0, C126)\\n            s1 := add(s1, C127)\\n            // SBOX\\n            t := mulmod(s0, s0, q)\\n            s0 := mulmod(mulmod(t, t, q), s0, q)\\n            t := mulmod(s1, s1, q)\\n            s1 := mulmod(mulmod(t, t, q), s1, q)\\n            // MIX\\n            s0 := mod(add(mulmod(s0, M00, q), mulmod(s1, M01, q)), q)\\n\\n            result := s0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf351af92fff6ed1dc02f1180c0c4906e79f1b825dd76df186caa787029a8de6a\",\"license\":\"MIT\"},\"contracts/Rln.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IPoseidonHasher} from \\\"./PoseidonHasher.sol\\\";\\nimport {IVerifier} from \\\"./IVerifier.sol\\\";\\n\\n/// The tree is full\\nerror FullTree();\\n\\n/// Invalid deposit amount\\n/// @param required The required deposit amount\\n/// @param provided The provided deposit amount\\nerror InsufficientDeposit(uint256 required, uint256 provided);\\n\\n/// Member is already registered\\nerror DuplicateIdCommitment();\\n\\n/// Invalid receiver address, when the receiver is the contract itself or 0x0\\nerror InvalidReceiverAddress(address to);\\n\\n/// Member is not registered\\nerror MemberNotRegistered(uint256 idCommitment);\\n\\n/// Member has no stake\\nerror MemberHasNoStake(uint256 idCommitment);\\n\\n/// User has insufficient balance to withdraw\\nerror InsufficientWithdrawalBalance();\\n\\n/// Contract has insufficient balance to return\\nerror InsufficientContractBalance();\\n\\n/// Invalid proof\\nerror InvalidProof();\\n\\ncontract RLN {\\n    /// @notice The deposit amount required to register as a member\\n    uint256 public immutable MEMBERSHIP_DEPOSIT;\\n\\n    /// @notice The depth of the merkle tree\\n    uint256 public immutable DEPTH;\\n\\n    /// @notice The size of the merkle tree, i.e 2^depth\\n    uint256 public immutable SET_SIZE;\\n\\n    /// @notice The index of the next member to be registered\\n    uint256 public idCommitmentIndex = 1;\\n\\n    /// @notice The amount of eth staked by each member\\n    /// maps from idCommitment to the amount staked\\n    mapping(uint256 => uint256) public stakedAmounts;\\n\\n    /// @notice The membership status of each member\\n    /// maps from idCommitment to their index in the set\\n    mapping(uint256 => uint256) public members;\\n\\n    /// @notice The balance of each user that can be withdrawn\\n    mapping(address => uint256) public withdrawalBalance;\\n\\n    /// @notice The Poseidon hasher contract\\n    IPoseidonHasher public immutable poseidonHasher;\\n\\n    /// @notice The groth16 verifier contract\\n    IVerifier public immutable verifier;\\n\\n    /// Emitted when a new member is added to the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberRegistered(uint256 idCommitment, uint256 index);\\n\\n    /// Emitted when a member is removed from the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberWithdrawn(uint256 idCommitment, uint256 index);\\n\\n    constructor(uint256 membershipDeposit, uint256 depth, address _poseidonHasher, address _verifier) {\\n        MEMBERSHIP_DEPOSIT = membershipDeposit;\\n        DEPTH = depth;\\n        SET_SIZE = 1 << depth;\\n        poseidonHasher = IPoseidonHasher(_poseidonHasher);\\n        verifier = IVerifier(_verifier);\\n    }\\n\\n    /// Allows a user to register as a member\\n    /// @param idCommitment The idCommitment of the member\\n    function register(uint256 idCommitment) external payable {\\n        if (msg.value != MEMBERSHIP_DEPOSIT) {\\n            revert InsufficientDeposit(MEMBERSHIP_DEPOSIT, msg.value);\\n        }\\n        _register(idCommitment, msg.value);\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param stake The amount of eth staked by the member\\n    function _register(uint256 idCommitment, uint256 stake) internal {\\n        if (members[idCommitment] != 0) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        stakedAmounts[idCommitment] = stake;\\n\\n        emit MemberRegistered(idCommitment, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    /// @dev Allows a user to slash a member\\n    /// @param idCommitment The idCommitment of the member\\n    function slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) external {\\n        _slash(idCommitment, receiver, proof);\\n    }\\n\\n    /// @dev Slashes a member by removing them from the set, and adding their\\n    /// stake to the receiver's available withdrawal balance\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param receiver The address to receive the funds\\n    function _slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) internal {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert InvalidReceiverAddress(receiver);\\n        }\\n\\n        if (members[idCommitment] == 0) revert MemberNotRegistered(idCommitment);\\n        // check if member is registered\\n        if (stakedAmounts[idCommitment] == 0) {\\n            revert MemberHasNoStake(idCommitment);\\n        }\\n\\n        if (!_verifyProof(idCommitment, receiver, proof)) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 amountToTransfer = stakedAmounts[idCommitment];\\n\\n        // delete member\\n        uint256 index = members[idCommitment];\\n        members[idCommitment] = 0;\\n        stakedAmounts[idCommitment] = 0;\\n\\n        // refund deposit\\n        withdrawalBalance[receiver] += amountToTransfer;\\n\\n        emit MemberWithdrawn(idCommitment, index);\\n    }\\n\\n    /// Allows a user to withdraw funds allocated to them upon slashing a member\\n    function withdraw() external {\\n        uint256 amount = withdrawalBalance[msg.sender];\\n\\n        if (amount == 0) revert InsufficientWithdrawalBalance();\\n        if (amount > address(this).balance) {\\n            revert InsufficientContractBalance();\\n        }\\n\\n        withdrawalBalance[msg.sender] = 0;\\n\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /// Hashes a value using the Poseidon hasher\\n    /// NOTE: The variant of Poseidon we use accepts only 1 input, assume n=2, and the second input is 0\\n    /// @param input The value to hash\\n    function hash(uint256 input) internal view returns (uint256) {\\n        return poseidonHasher.hash(input);\\n    }\\n\\n    /// @dev Groth16 proof verification\\n    function _verifyProof(uint256 idCommitment, address receiver, uint256[8] calldata proof)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [idCommitment, uint256(uint160(receiver))]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaba729711978a308143b0e44a95f0925ff4fac1f65864ff6b9895f000fc851ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405260016000553480156200001757600080fd5b50604051620013dc380380620013dc83398181016040528101906200003d919062000171565b83608081815250508260a08181525050826001901b60c081815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff168152505050505050620001e3565b600080fd5b6000819050919050565b620000e681620000d1565b8114620000f257600080fd5b50565b6000815190506200010681620000db565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000139826200010c565b9050919050565b6200014b816200012c565b81146200015757600080fd5b50565b6000815190506200016b8162000140565b92915050565b600080600080608085870312156200018e576200018d620000cc565b5b60006200019e87828801620000f5565b9450506020620001b187828801620000f5565b9350506040620001c4878288016200015a565b9250506060620001d7878288016200015a565b91505092959194509250565b60805160a05160c05160e0516101005161119862000244600039600081816102c30152610973015260006102e70152600081816104d4015261088c0152600061047a0152600081816104f80152818161051f015261058b01526111986000f3fe6080604052600436106100a75760003560e01c8063ae74552a11610064578063ae74552a146101aa578063bc499128146101d5578063c5b208ff14610212578063d0383d681461024f578063f207564e1461027a578063f220b9ec14610296576100a7565b80632b7ac3f3146100ac578063331b6ab3146100d75780633ccfd60b146101025780635daf08ca146101195780638be9b1191461015657806398366e351461017f575b600080fd5b3480156100b857600080fd5b506100c16102c1565b6040516100ce9190610be7565b60405180910390f35b3480156100e357600080fd5b506100ec6102e5565b6040516100f99190610c23565b60405180910390f35b34801561010e57600080fd5b50610117610309565b005b34801561012557600080fd5b50610140600480360381019061013b9190610c79565b610450565b60405161014d9190610cb5565b60405180910390f35b34801561016257600080fd5b5061017d60048036038101906101789190610d35565b610468565b005b34801561018b57600080fd5b50610194610478565b6040516101a19190610cb5565b60405180910390f35b3480156101b657600080fd5b506101bf61049c565b6040516101cc9190610cb5565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610c79565b6104a2565b6040516102099190610cb5565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190610dc7565b6104ba565b6040516102469190610cb5565b60405180910390f35b34801561025b57600080fd5b506102646104d2565b6040516102719190610cb5565b60405180910390f35b610294600480360381019061028f9190610c79565b6104f6565b005b3480156102a257600080fd5b506102ab610589565b6040516102b89190610cb5565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103610387576040517f6f50367a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b478111156103c1576040517f786e0a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561044c573d6000803e3d6000fd5b5050565b60026020528060005260406000206000915090505481565b6104738383836105ad565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b60016020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000341461057c577f0000000000000000000000000000000000000000000000000000000000000000346040517f25c3f46e000000000000000000000000000000000000000000000000000000008152600401610573929190610df4565b60405180910390fd5b610586813461083e565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806106135750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561065557816040517f4a149d0800000000000000000000000000000000000000000000000000000000815260040161064c9190610e3e565b60405180910390fd5b60006002600085815260200190815260200160002054036106ad57826040517f5a971ebb0000000000000000000000000000000000000000000000000000000081526004016106a49190610cb5565b60405180910390fd5b600060016000858152602001908152602001600020540361070557826040517faabeeba50000000000000000000000000000000000000000000000000000000081526004016106fc9190610cb5565b60405180910390fd5b61071083838361096f565b610746576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060016000858152602001908152602001600020549050600060026000868152602001908152602001600020549050600060026000878152602001908152602001600020819055506000600160008781526020019081526020016000208190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107f79190610e88565b925050819055507f62ec3a516d22a993ce5cb4e7593e878c74f4d799dde522a88dc27a994fd5a943858260405161082f929190610df4565b60405180910390a15050505050565b600060026000848152602001908152602001600020541461088a576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600054106108e5576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005460026000848152602001908152602001600020819055508060016000848152602001908152602001600020819055507f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d28260005460405161094a929190610df4565b60405180910390a160016000808282546109649190610e88565b925050819055505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5c9d69e6040518060400160405280856000600881106109cc576109cb610ede565b5b60200201358152602001856001600881106109ea576109e9610ede565b5b60200201358152506040518060400160405280604051806040016040528088600260088110610a1c57610a1b610ede565b5b6020020135815260200188600360088110610a3a57610a39610ede565b5b60200201358152508152602001604051806040016040528088600460088110610a6657610a65610ede565b5b6020020135815260200188600560088110610a8457610a83610ede565b5b6020020135815250815250604051806040016040528087600660088110610aae57610aad610ede565b5b6020020135815260200187600760088110610acc57610acb610ede565b5b602002013581525060405180604001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff168152506040518563ffffffff1660e01b8152600401610b1e94939291906110b6565b602060405180830381865afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190611135565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bad610ba8610ba384610b68565b610b88565b610b68565b9050919050565b6000610bbf82610b92565b9050919050565b6000610bd182610bb4565b9050919050565b610be181610bc6565b82525050565b6000602082019050610bfc6000830184610bd8565b92915050565b6000610c0d82610bb4565b9050919050565b610c1d81610c02565b82525050565b6000602082019050610c386000830184610c14565b92915050565b600080fd5b6000819050919050565b610c5681610c43565b8114610c6157600080fd5b50565b600081359050610c7381610c4d565b92915050565b600060208284031215610c8f57610c8e610c3e565b5b6000610c9d84828501610c64565b91505092915050565b610caf81610c43565b82525050565b6000602082019050610cca6000830184610ca6565b92915050565b6000610cdb82610b68565b9050919050565b610ceb81610cd0565b8114610cf657600080fd5b50565b600081359050610d0881610ce2565b92915050565b600080fd5b600081905082602060080282011115610d2f57610d2e610d0e565b5b92915050565b60008060006101408486031215610d4f57610d4e610c3e565b5b6000610d5d86828701610c64565b9350506020610d6e86828701610cf9565b9250506040610d7f86828701610d13565b9150509250925092565b6000610d9482610b68565b9050919050565b610da481610d89565b8114610daf57600080fd5b50565b600081359050610dc181610d9b565b92915050565b600060208284031215610ddd57610ddc610c3e565b5b6000610deb84828501610db2565b91505092915050565b6000604082019050610e096000830185610ca6565b610e166020830184610ca6565b9392505050565b6000610e2882610bb4565b9050919050565b610e3881610e1d565b82525050565b6000602082019050610e536000830184610e2f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e9382610c43565b9150610e9e83610c43565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ed357610ed2610e59565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b610f3681610c43565b82525050565b6000610f488383610f2d565b60208301905092915050565b6000602082019050919050565b610f6a81610f0d565b610f748184610f18565b9250610f7f82610f23565b8060005b83811015610fb0578151610f978782610f3c565b9650610fa283610f54565b925050600181019050610f83565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b610fec81610f0d565b610ff68184610fd8565b925061100182610f23565b8060005b838110156110325781516110198782610f3c565b965061102483610f54565b925050600181019050611005565b505050505050565b60006110468383610fe3565b60408301905092915050565b6000602082019050919050565b61106881610fb8565b6110728184610fc3565b925061107d82610fce565b8060005b838110156110ae578151611095878261103a565b96506110a083611052565b925050600181019050611081565b505050505050565b6000610140820190506110cc6000830187610f61565b6110d9604083018661105f565b6110e660c0830185610f61565b6110f4610100830184610f61565b95945050505050565b60008115159050919050565b611112816110fd565b811461111d57600080fd5b50565b60008151905061112f81611109565b92915050565b60006020828403121561114b5761114a610c3e565b5b600061115984828501611120565b9150509291505056fea26469706673582212208074065fef168f5f0c27b80d2553070a161db1c01092b76699947b2e28c96b5064736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063ae74552a11610064578063ae74552a146101aa578063bc499128146101d5578063c5b208ff14610212578063d0383d681461024f578063f207564e1461027a578063f220b9ec14610296576100a7565b80632b7ac3f3146100ac578063331b6ab3146100d75780633ccfd60b146101025780635daf08ca146101195780638be9b1191461015657806398366e351461017f575b600080fd5b3480156100b857600080fd5b506100c16102c1565b6040516100ce9190610be7565b60405180910390f35b3480156100e357600080fd5b506100ec6102e5565b6040516100f99190610c23565b60405180910390f35b34801561010e57600080fd5b50610117610309565b005b34801561012557600080fd5b50610140600480360381019061013b9190610c79565b610450565b60405161014d9190610cb5565b60405180910390f35b34801561016257600080fd5b5061017d60048036038101906101789190610d35565b610468565b005b34801561018b57600080fd5b50610194610478565b6040516101a19190610cb5565b60405180910390f35b3480156101b657600080fd5b506101bf61049c565b6040516101cc9190610cb5565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610c79565b6104a2565b6040516102099190610cb5565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190610dc7565b6104ba565b6040516102469190610cb5565b60405180910390f35b34801561025b57600080fd5b506102646104d2565b6040516102719190610cb5565b60405180910390f35b610294600480360381019061028f9190610c79565b6104f6565b005b3480156102a257600080fd5b506102ab610589565b6040516102b89190610cb5565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103610387576040517f6f50367a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b478111156103c1576040517f786e0a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561044c573d6000803e3d6000fd5b5050565b60026020528060005260406000206000915090505481565b6104738383836105ad565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b60016020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000341461057c577f0000000000000000000000000000000000000000000000000000000000000000346040517f25c3f46e000000000000000000000000000000000000000000000000000000008152600401610573929190610df4565b60405180910390fd5b610586813461083e565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806106135750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561065557816040517f4a149d0800000000000000000000000000000000000000000000000000000000815260040161064c9190610e3e565b60405180910390fd5b60006002600085815260200190815260200160002054036106ad57826040517f5a971ebb0000000000000000000000000000000000000000000000000000000081526004016106a49190610cb5565b60405180910390fd5b600060016000858152602001908152602001600020540361070557826040517faabeeba50000000000000000000000000000000000000000000000000000000081526004016106fc9190610cb5565b60405180910390fd5b61071083838361096f565b610746576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060016000858152602001908152602001600020549050600060026000868152602001908152602001600020549050600060026000878152602001908152602001600020819055506000600160008781526020019081526020016000208190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107f79190610e88565b925050819055507f62ec3a516d22a993ce5cb4e7593e878c74f4d799dde522a88dc27a994fd5a943858260405161082f929190610df4565b60405180910390a15050505050565b600060026000848152602001908152602001600020541461088a576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600054106108e5576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005460026000848152602001908152602001600020819055508060016000848152602001908152602001600020819055507f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d28260005460405161094a929190610df4565b60405180910390a160016000808282546109649190610e88565b925050819055505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5c9d69e6040518060400160405280856000600881106109cc576109cb610ede565b5b60200201358152602001856001600881106109ea576109e9610ede565b5b60200201358152506040518060400160405280604051806040016040528088600260088110610a1c57610a1b610ede565b5b6020020135815260200188600360088110610a3a57610a39610ede565b5b60200201358152508152602001604051806040016040528088600460088110610a6657610a65610ede565b5b6020020135815260200188600560088110610a8457610a83610ede565b5b6020020135815250815250604051806040016040528087600660088110610aae57610aad610ede565b5b6020020135815260200187600760088110610acc57610acb610ede565b5b602002013581525060405180604001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff168152506040518563ffffffff1660e01b8152600401610b1e94939291906110b6565b602060405180830381865afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190611135565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bad610ba8610ba384610b68565b610b88565b610b68565b9050919050565b6000610bbf82610b92565b9050919050565b6000610bd182610bb4565b9050919050565b610be181610bc6565b82525050565b6000602082019050610bfc6000830184610bd8565b92915050565b6000610c0d82610bb4565b9050919050565b610c1d81610c02565b82525050565b6000602082019050610c386000830184610c14565b92915050565b600080fd5b6000819050919050565b610c5681610c43565b8114610c6157600080fd5b50565b600081359050610c7381610c4d565b92915050565b600060208284031215610c8f57610c8e610c3e565b5b6000610c9d84828501610c64565b91505092915050565b610caf81610c43565b82525050565b6000602082019050610cca6000830184610ca6565b92915050565b6000610cdb82610b68565b9050919050565b610ceb81610cd0565b8114610cf657600080fd5b50565b600081359050610d0881610ce2565b92915050565b600080fd5b600081905082602060080282011115610d2f57610d2e610d0e565b5b92915050565b60008060006101408486031215610d4f57610d4e610c3e565b5b6000610d5d86828701610c64565b9350506020610d6e86828701610cf9565b9250506040610d7f86828701610d13565b9150509250925092565b6000610d9482610b68565b9050919050565b610da481610d89565b8114610daf57600080fd5b50565b600081359050610dc181610d9b565b92915050565b600060208284031215610ddd57610ddc610c3e565b5b6000610deb84828501610db2565b91505092915050565b6000604082019050610e096000830185610ca6565b610e166020830184610ca6565b9392505050565b6000610e2882610bb4565b9050919050565b610e3881610e1d565b82525050565b6000602082019050610e536000830184610e2f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e9382610c43565b9150610e9e83610c43565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ed357610ed2610e59565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b610f3681610c43565b82525050565b6000610f488383610f2d565b60208301905092915050565b6000602082019050919050565b610f6a81610f0d565b610f748184610f18565b9250610f7f82610f23565b8060005b83811015610fb0578151610f978782610f3c565b9650610fa283610f54565b925050600181019050610f83565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b610fec81610f0d565b610ff68184610fd8565b925061100182610f23565b8060005b838110156110325781516110198782610f3c565b965061102483610f54565b925050600181019050611005565b505050505050565b60006110468383610fe3565b60408301905092915050565b6000602082019050919050565b61106881610fb8565b6110728184610fc3565b925061107d82610fce565b8060005b838110156110ae578151611095878261103a565b96506110a083611052565b925050600181019050611081565b505050505050565b6000610140820190506110cc6000830187610f61565b6110d9604083018661105f565b6110e660c0830185610f61565b6110f4610100830184610f61565b95945050505050565b60008115159050919050565b611112816110fd565b811461111d57600080fd5b50565b60008151905061112f81611109565b92915050565b60006020828403121561114b5761114a610c3e565b5b600061115984828501611120565b9150509291505056fea26469706673582212208074065fef168f5f0c27b80d2553070a161db1c01092b76699947b2e28c96b5064736f6c634300080f0033",
  "devdoc": {
    "errors": {
      "InsufficientDeposit(uint256,uint256)": [
        {
          "params": {
            "provided": "The provided deposit amount",
            "required": "The required deposit amount"
          }
        }
      ]
    },
    "events": {
      "MemberRegistered(uint256,uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member",
          "index": "The index of the member in the set"
        }
      },
      "MemberWithdrawn(uint256,uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member",
          "index": "The index of the member in the set"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "register(uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member"
        }
      },
      "slash(uint256,address,uint256[8])": {
        "details": "Allows a user to slash a member",
        "params": {
          "idCommitment": "The idCommitment of the member"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DuplicateIdCommitment()": [
        {
          "notice": "Member is already registered"
        }
      ],
      "FullTree()": [
        {
          "notice": "The tree is full"
        }
      ],
      "InsufficientContractBalance()": [
        {
          "notice": "Contract has insufficient balance to return"
        }
      ],
      "InsufficientDeposit(uint256,uint256)": [
        {
          "notice": "Invalid deposit amount"
        }
      ],
      "InsufficientWithdrawalBalance()": [
        {
          "notice": "User has insufficient balance to withdraw"
        }
      ],
      "InvalidProof()": [
        {
          "notice": "Invalid proof"
        }
      ],
      "InvalidReceiverAddress(address)": [
        {
          "notice": "Invalid receiver address, when the receiver is the contract itself or 0x0"
        }
      ],
      "MemberHasNoStake(uint256)": [
        {
          "notice": "Member has no stake"
        }
      ],
      "MemberNotRegistered(uint256)": [
        {
          "notice": "Member is not registered"
        }
      ]
    },
    "events": {
      "MemberRegistered(uint256,uint256)": {
        "notice": "Emitted when a new member is added to the set"
      },
      "MemberWithdrawn(uint256,uint256)": {
        "notice": "Emitted when a member is removed from the set"
      }
    },
    "kind": "user",
    "methods": {
      "DEPTH()": {
        "notice": "The depth of the merkle tree"
      },
      "MEMBERSHIP_DEPOSIT()": {
        "notice": "The deposit amount required to register as a member"
      },
      "SET_SIZE()": {
        "notice": "The size of the merkle tree, i.e 2^depth"
      },
      "idCommitmentIndex()": {
        "notice": "The index of the next member to be registered"
      },
      "members(uint256)": {
        "notice": "The membership status of each member maps from idCommitment to their index in the set"
      },
      "poseidonHasher()": {
        "notice": "The Poseidon hasher contract"
      },
      "register(uint256)": {
        "notice": "Allows a user to register as a member"
      },
      "stakedAmounts(uint256)": {
        "notice": "The amount of eth staked by each member maps from idCommitment to the amount staked"
      },
      "verifier()": {
        "notice": "The groth16 verifier contract"
      },
      "withdraw()": {
        "notice": "Allows a user to withdraw funds allocated to them upon slashing a member"
      },
      "withdrawalBalance(address)": {
        "notice": "The balance of each user that can be withdrawn"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 516,
        "contract": "contracts/Rln.sol:RLN",
        "label": "idCommitmentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 521,
        "contract": "contracts/Rln.sol:RLN",
        "label": "stakedAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 526,
        "contract": "contracts/Rln.sol:RLN",
        "label": "members",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 531,
        "contract": "contracts/Rln.sol:RLN",
        "label": "withdrawalBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
